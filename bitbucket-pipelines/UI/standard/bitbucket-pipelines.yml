# vitaCare Prescription Service Bitbucket Pipelines Template.
# This template requires very little modifications if the devs are using the standard build steps...user.adimin.ui is your reference. If not, you will have to modify the artifacts path and the build steps
clone:
  enabled: true
  lfs: false
  depth: full
definitions:
  services:
    docker:
      memory: 2048
  steps:
    - step: &semver_step
        name: Generate Semantic Version
        image: mcr.microsoft.com/dotnet/core/sdk:3.1
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        caches:
          - dotnetcore
        script:
          - dotnet new tool-manifest
          - dotnet tool install GitVersion.Tool --version 5.10.3
          - dotnet tool restore
          - dotnet gitversion /output buildserver

          - source gitversion.properties
          - echo SemVer generated by GitVersion $GITVERSION_MAJORMINORPATCH
        artifacts:
          - gitversion.properties
    - step: &build_only_step
        name: Build Angular Project
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        caches:
          - node
        script:
          - >
            echo "node version: $(node -v)"
          - >
            echo "npm version:" $(npm -v) 
          
          - apt-get update
          - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          - apt-get install ./google-chrome-stable_current_amd64.deb -y
          - export CHROME_BIN="/usr/bin/google-chrome"
          - >
            echo "Chrome version" $(google-chrome --version)
          
          - npm install
          - npm run cicd-build
          - npm run test
          - pipe: sonarsource/sonarqube-scan:1.1.0
            variables:
              SONAR_HOST_URL: $SONAR_SERVER
              SONAR_TOKEN: $SONAR_TOKEN
              EXTRA_ARGS: -Dsonar.projectKey=$BITBUCKET_REPO_SLUG -Dsonar.typescript.lcov.reportPaths="./coverage/lcov.info" -Dsonar.branch.name=$BITBUCKET_BRANCH -Dsonar.exclusions=node_modules/*,Docker*,**/*.test.*,coverage/lcov.info,coverage/lcov-report/*
        artifacts:
          - "coverage/**"
    - step: &build_and_publish_step
        name: Build & Publish Angular Project
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        caches:
          - node
        script:
          - >
            echo "node version: $(node -v)"
          - >
            echo "npm version:" $(npm -v) 
          
          - apt-get update
          - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          - apt-get install ./google-chrome-stable_current_amd64.deb -y
          - export CHROME_BIN="/usr/bin/google-chrome"
          - >
            echo "Chrome version" $(google-chrome --version)

          - npm install
          - npm run cicd-build
          - npm run test
          - pipe: sonarsource/sonarqube-scan:1.1.0
            variables:
              SONAR_HOST_URL: $SONAR_SERVER
              SONAR_TOKEN: $SONAR_TOKEN
              EXTRA_ARGS: -Dsonar.projectKey=$BITBUCKET_REPO_SLUG -Dsonar.typescript.lcov.reportPaths="./coverage/lcov.info" -Dsonar.branch.name=$BITBUCKET_BRANCH -Dsonar.exclusions=node_modules/*,Docker*,**/*.test.*,coverage/lcov.info,coverage/lcov-report/*
        artifacts:
          - "dist/**"
    - step: &deploy_step
        name: Octopus Pack, Push & Deploy
        image: octopusdeploy/octo:6.17.3-alpine
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - source gitversion.properties
          - echo Octopus will pack, push and deploy package as version $GITVERSION_MAJORMINORPATCH
          - export VERSION=$GITVERSION_MAJORMINORPATCH.$BITBUCKET_BUILD_NUMBER
          - echo "using $BITBUCKET_DEPLOYMENT_ENVIRONMENT deploy $BITBUCKET_REPO_SLUG."
          - octo pack --id $BITBUCKET_REPO_SLUG --version $VERSION --outFolder ./out --format nupkg --basePath dist
          - octo create-project --name $BITBUCKET_REPO_SLUG --ignoreIfExists --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY --projectGroup=VPS --lifecycle="Default Lifecycle"
          - octo create-environment --name $BITBUCKET_DEPLOYMENT_ENVIRONMENT --ignoreIfExists --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY
          - octo push --package ./out/$BITBUCKET_REPO_SLUG.$VERSION.nupkg --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY
          - octo create-release --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY --project $BITBUCKET_REPO_SLUG --deployto $BITBUCKET_DEPLOYMENT_ENVIRONMENT --packageVersion $VERSION --version $VERSION --enableservicemessages --progress
          - echo export BITBUCKET_DEPLOYMENT_ENVIRONMENT=$BITBUCKET_DEPLOYMENT_ENVIRONMENT >> shared_vars.sh
        artifacts:
          - out/**
          - shared_vars.sh
image: node:14.19.3
options:
  max-time: 30
  size: 2x
pipelines:
  branches:
    master: 
      - step: *build_only_step
    nerds-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: DEV
    runts-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: QA
    patch:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: PATCH
    cofy-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: COFY
    taco-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: TACO
  custom:
    manual-deploy:
      - variables:
          - name: BITBUCKET_DEPLOYMENT_ENVIRONMENT
            default: "DEV"
            allowed-values:
              - "DEV"
              - "QA"
              - "UAT"
              - "PATCH"
              - "COFY"
              - "TACO"
              - "INT"
      - step: *semver_step
      - step: *build_and_publish_step
      - step: *deploy_step
  pull-requests:
    "**":
      - step: *build_only_step
