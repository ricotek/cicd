# vitaCare Prescription Service Bitbucket Pipelines Template. 
## Instructions on usage:
## Line 11 is the only hard-coded line: deploy/vps-access-adverseevents-api/*.tgz
## So you can pretty much copy\paste and create the needed vars (use access-adverseevents-api vars as a refrence, there are six vars that need to be created-- copy them from the next line
##  PROJ_PATH COVERAGE_REPORT_PATH DOCKERFILE_PATH COMPONENT_URL_SUFFIX REPO_PATH COMPONENT
clone:
  enabled: true
  lfs: false
  depth: full
definitions:
  caches:
    sonar: ~/.sonar
  steps:
    - step: &build_only_step
        name: Build Web API Solution
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        caches:
          - dotnetcore
          - sonar
        script:
          - echo export SOLUTION_PATH=$SLN_PATH >> shared_vars.sh
          - echo export NUGET_CONFIG_PATH=$NUGET_CONFIG_PATH >> shared_vars.sh
          - echo export PROJECT_PATH=$PROJ_PATH >> shared_vars.sh
          - echo export COVERAGE_REPORT_PATH=$COVERAGE_REPORT_PATH >> shared_vars.sh
          - echo export COMPONENT=$COMPONENT >> shared_vars.sh
          - source shared_vars.sh

          - apt update
          - apt install openjdk-11-jdk -y
          
          - dotnet new tool-manifest
          - dotnet tool install dotnet-sonarscanner --version 5.8.0
          - dotnet tool install dotnet-reportgenerator-globaltool --version 5.1.9
          - dotnet tool restore
          
          - dotnet sonarscanner begin /k:"$BITBUCKET_REPO_SLUG" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="$SONAR_SERVER" /d:sonar.cs.opencover.reportsPaths="$COVERAGE_REPORT_PATH"
          - dotnet restore $SOLUTION_PATH --configfile $NUGET_CONFIG_PATH
          - dotnet build $SOLUTION_PATH --no-restore --configuration Release
          - dotnet test $SOLUTION_PATH --configuration Release --collect:"XPlat Code Coverage" --logger:xunit -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          - dotnet reportgenerator -reports:"$COVERAGE_REPORT_PATH" -targetdir:"CodeCoverageReport" -reporttypes:"Html"
          
          - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
          - pipe: sonarsource/sonarqube-quality-gate:1.1.0
            variables:
              SONAR_TOKEN: $SONAR_TOKEN
              REPORT_FILE: .sonarqube/out/.sonar/report-task.txt
        artifacts:
          - CodeCoverageReport/**
          - UnitTestReport/**
    - step: &semver
        name: Generate Semantic Version
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - dotnet new tool-manifest
          - dotnet tool install GitVersion.Tool --version 5.10.3
          - dotnet tool restore
          - dotnet gitversion /output buildserver
          - source gitversion.properties
          - echo SemVer generated by GitVersion $GITVERSION_MAJORMINORPATCH
        artifacts:
          - gitversion.properties
    - step: &build
        name: Build, publish & tag
        oidc: true
        image: atlassian/pipelines-awscli
        services:
          - docker
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
         - source gitversion.properties
         - echo Octopus will pack, push and deploy package as version $GITVERSION_MAJORMINORPATCH
         - export VERSION=$GITVERSION_MAJORMINORPATCH-$BITBUCKET_BUILD_NUMBER
         - echo "using $BITBUCKET_DEPLOYMENT_ENVIRONMENT deploy $BITBUCKET_REPO_SLUG."
         - docker version
         - pwd
         - cd $DOCKERFILE_PATH
         - ls -la
         - docker build -f Dockerfile -t "$BITBUCKET_REPO_SLUG" ..
         - docker save --output tmp-image.docker $BITBUCKET_REPO_SLUG
         - docker load --input ./tmp-image.docker
         - docker images
         - REPOSITORY_PRIVATE="$REPO_PATH"
        # use the pipe to push the image to AWS ECR
         - pipe: atlassian/aws-ecr-push-image:1.6.2
           variables:
             AWS_DEFAULT_REGION: us-east-1
             AWS_OIDC_ROLE_ARN: 'arn:aws:iam::313424411561:role/au-bitbucket-role'
             IMAGE_NAME: $BITBUCKET_REPO_SLUG
             TAGS: ${VERSION}
    - step: &pack
        oidc: true
        name:  Helm Pack
        image: alpine/helm
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - source gitversion.properties
          - echo Octopus will pack, push and deploy package as version $GITVERSION_MAJORMINORPATCH-$BITBUCKET_BUILD_NUMBER
          - export VERSION=$GITVERSION_MAJORMINORPATCH-$BITBUCKET_BUILD_NUMBER
          - echo "using $BITBUCKET_DEPLOYMENT_ENVIRONMENT deploy $BITBUCKET_REPO_SLUG."
          - cd deploy/$COMPONENT
          - helm package . --version $VERSION --app-version $VERSION
        artifacts:
          - deploy/vps-access-adverseevents-api/*.tgz
    - step: &release
        name: Octopus Push & Release
        image: octopusdeploy/octo:6.17.3-alpine
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - source gitversion.properties
          - echo Octopus will pack, push and deploy package as version $GITVERSION_MAJORMINORPATCH-$BITBUCKET_BUILD_NUMBER
          - export VERSION=$GITVERSION_MAJORMINORPATCH-$BITBUCKET_BUILD_NUMBER
          - echo "using $BITBUCKET_DEPLOYMENT_ENVIRONMENT deploy $BITBUCKET_REPO_SLUG."
          - pwd
          - ls -la $(pwd)/deploy/$COMPONENT
          - octo push --package $(pwd)/deploy/$COMPONENT/*.tgz --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY
          - octo create-release --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY --project $BITBUCKET_REPO_SLUG.k8s --deployto $BITBUCKET_DEPLOYMENT_ENVIRONMENT --packageVersion $VERSION --version $VERSION --enableservicemessages --progress --waitForDeployment
          - echo export BITBUCKET_DEPLOYMENT_ENVIRONMENT=$BITBUCKET_DEPLOYMENT_ENVIRONMENT >> shared_vars.sh
        artifacts:
          - out/**
          - shared_vars.sh
    - step: &postman
        name: Execute Postman Integration Tests
        image: postman/newman:5.3.1-alpine
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - source shared_vars.sh
          - cd test
          - newman --version
          - npm i -g newman-reporter-htmlextra
          - newman run $BITBUCKET_REPO_SLUG.postman_collection.json -e $BITBUCKET_REPO_SLUG.postman_environment.json -n 1 --reporters  "cli,htmlextra" --reporter-htmlextra-title "Newman Report" --reporter-htmlextra-export newman/report.html --env-var baseUrl=https://$BITBUCKET_DEPLOYMENT_ENVIRONMENT-$COMPONENT_URL_SUFFIX
        artifacts:
          - test/newman**
image:  mcr.microsoft.com/dotnet/sdk:6.0
options:
  max-time: 10
  size: 1x

pipelines:
  branches:
    master: 
      - step: *build_only_step
    nerds-dev:
      - step: *semver
      - step: *build
      - step: *pack
      - step:
          <<: *release
          deployment: DEV
      - step: *postman
    runts-dev:
      - step: *semver
      - step: *build
      - step: *pack
      - step:
          <<: *release
          deployment: QA
      - step: *postman
    patch:
      - step: *semver
      - step: *build
      - step: *pack
      - step:
          <<: *release
          deployment: PATCH
      - step: *postman
    cofy-dev:
      - step: *semver
      - step: *build
      - step: *pack
      - step:
          <<: *release
          deployment: COFY
      - step: *postman
    taco-dev:
      - step: *semver
      - step: *build
      - step: *pack
      - step:
          <<: *release
          deployment: TACO
      - step: *postman
  custom:
    manual-deploy:
      - variables:
          - name: BITBUCKET_DEPLOYMENT_ENVIRONMENT
            default: "DEV"
            allowed-values:
              - "COFY"
              - "DEV"
              - "EXT"
              - "INT"
              - "PATCH"
              - "QA"
              - "TACO"
              - "UAT"
      - step: *semver
      - step: *build
      - step: *pack
      - step: *release
  pull-requests:
    "**":
      - step: *build_only_step