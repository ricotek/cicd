# This pipeline can be used as a reference\template (wiht minor changes) for components that have a sonarqube project. 
# The steps defined in this pipeline include build, unit tests, deploy and run postman tests (postman is commented out below)
# The vars needed to be added to the project are: CSPROJ_PATH & COMPONENT. Check bb cloud vars to see the values used
# The pipeline contains other vars used in the pipeline. Static vars like: $SLN_PATH, OCTOPUS_SERVER, OCTOPUS_APIKEY 
# have been added to the root of the bb locud instance (vitacare), since they are shared throughout many components
# There are also system vars that are used: BITBUCKET_REPO_SLUG,
# vitaCare Prescription Service Bitbucket Pipelines Template.
image: mcr.microsoft.com/dotnet/core/sdk:3.1
clone:
  enabled: true
  lfs: false
  depth: full
definitions:
  caches:
    sonar: ~/.sonar
  steps:
    - step: &semver_step
        name: Generate Semantic Version
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - dotnet new tool-manifest
          - dotnet tool install GitVersion.Tool --version 5.10.3
          - dotnet tool restore
          - dotnet gitversion /output buildserver
          - source gitversion.properties
          - echo SemVer generated by GitVersion $GITVERSION_FULLSEMVER
        artifacts:
          - gitversion.properties
    - step: &build_only_step
        name: Build Web API Solution
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        caches:
          - dotnetcore
          - sonar
        script:
          - apt update
          - apt install openjdk-11-jdk -y
          - dotnet new tool-manifest
          - dotnet tool install dotnet-sonarscanner --version 5.8.0
          - dotnet tool install dotnet-reportgenerator-globaltool --version 5.1.9
          - dotnet tool restore
          - dotnet sonarscanner begin /k:"$BITBUCKET_REPO_SLUG" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="$SONAR_SERVER" /d:sonar.cs.opencover.reportsPaths="$COVERAGE_REPORT_PATH"
          - dotnet restore $SLN_PATH --configfile $NUGET_CONFIG_PATH
          - dotnet build $SLN_PATH --no-restore --configuration Release
          - dotnet test $SLN_PATH --configuration $CONFIG --collect:"XPlat Code Coverage" --logger:xunit -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          - dotnet reportgenerator -reports:"$COVERAGE_REPORT_PATH" -targetdir:"CodeCoverageReport" -reporttypes:"Html"
          - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
          - pipe: sonarsource/sonarqube-quality-gate:1.1.0
            variables:
              SONAR_TOKEN: $SONAR_TOKEN
              REPORT_FILE: .sonarqube/out/.sonar/report-task.txt
        artifacts:
          - CodeCoverageReport/**
          - UnitTestReport/**
          # - shared_vars.sh
    - step: &build_and_publish_step
        name: Build & Publish Web API Solution
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        caches:
          - dotnetcore
          - sonar
        script:
          - apt update
          - apt install openjdk-11-jdk -y    
          - dotnet new tool-manifest
          - dotnet tool install dotnet-sonarscanner --version 5.8.0
          - dotnet tool install dotnet-reportgenerator-globaltool --version 5.1.9
          - dotnet tool restore
          - dotnet sonarscanner begin /k:"$BITBUCKET_REPO_SLUG" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="$SONAR_SERVER" /d:sonar.cs.opencover.reportsPaths="$COVERAGE_REPORT_PATH"
          - dotnet restore $SLN_PATH --configfile $NUGET_CONFIG_PATH
          - dotnet build $SLN_PATH --no-restore --configuration Release
          - dotnet test $SLN_PATH --configuration $CONFIG --collect:"XPlat Code Coverage" --logger:xunit -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          - dotnet reportgenerator -reports:"$COVERAGE_REPORT_PATH" -targetdir:"CodeCoverageReport" -reporttypes:"Html"
          - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
          - dotnet publish $CSPROJ_PATH --output published --configuration Release
          - pipe: sonarsource/sonarqube-quality-gate:1.1.0
            variables:
              SONAR_TOKEN: $SONAR_TOKEN
              REPORT_FILE: .sonarqube/out/.sonar/report-task.txt
        artifacts:
          - published/**
    - step: &deploy_step
        name: Octopus Pack, Push & Deploy
        image: octopusdeploy/octo:6.17.3-alpine
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - source gitversion.properties
          - echo Octopus will pack, push and deploy package as version $GITVERSION_FULLSEMVER
          - export VERSION=$GITVERSION_FULLSEMVER.$BITBUCKET_BUILD_NUMBER
          - echo "using $BITBUCKET_DEPLOYMENT_ENVIRONMENT deploy $BITBUCKET_REPO_SLUG."
          - apk update
          - apk add git
          - apk add openssh-client
          - git clone git@bitbucket.org:vitacarerx/config.git
          - cp -R config/component/$COMPONENT/*.json published/
          - octo pack --id Vps.$BITBUCKET_REPO_SLUG --version $VERSION --outFolder ./out --format nupkg --basePath published
          - octo create-project --name $BITBUCKET_REPO_SLUG --ignoreIfExists --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY --projectGroup=VPS --lifecycle="Default Lifecycle"
          - octo create-environment --name $BITBUCKET_DEPLOYMENT_ENVIRONMENT --ignoreIfExists --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY
          - octo push --package ./out/Vps.$BITBUCKET_REPO_SLUG.$VERSION.nupkg --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY
          - octo create-release --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY --project $BITBUCKET_REPO_SLUG --deployto $BITBUCKET_DEPLOYMENT_ENVIRONMENT --packageVersion $VERSION --version $VERSION --enableservicemessages --progress
          - echo export BITBUCKET_DEPLOYMENT_ENVIRONMENT=$BITBUCKET_DEPLOYMENT_ENVIRONMENT >> shared_vars.sh
        artifacts:
          - out/**
          - shared_vars.sh
    - step: &postman_step
        name: Execute Postman Integration Tests
        image: postman/newman:5.3.1-alpine
        runs-on:
          - "self.hosted"
          - "linux"
          - "active"
        script:
          - source shared_vars.sh
          - cd test
          - newman --version
          - npm i -g newman-reporter-htmlextra
          - newman run vps.coracare.$COMPONENT.postman_collection.json -e vps.coracare.$COMPONENT.postman_environment.json -n 1 --reporters  "cli,htmlextra" --reporter-htmlextra-title "Newman Report" --reporter-htmlextra-export newman/report.html --env-var baseUrl=https://$BITBUCKET_DEPLOYMENT_ENVIRONMENT-$COMPONENT.coracare.vitacarerx.com
        artifacts:
          - test/newman**
image: mcr.microsoft.com/dotnet/core/sdk:3.1
options:
  max-time: 10
  size: 1x
pipelines:
  branches:
    master: 
      - step: *build_only_step
    nerds-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: DEV
      - step: *postman_step
    runts-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: QA
      - step: *postman_step
    patch:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: PATCH
      - step: *postman_step
    cofy-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: COFY
      - step: *postman_step
    taco-dev:
      - step: *semver_step
      - step: *build_and_publish_step
      - step:
          <<: *deploy_step
          deployment: TACO
      - step: *postman_step
  custom:
    manual-deploy:
      - variables:
          - name: BITBUCKET_DEPLOYMENT_ENVIRONMENT
            default: "DEV"
            allowed-values:
              - "COFY"
              - "DEV"
              - "INT"
              - "PATCH"
              - "QA"
              - "TACO"
              - "UAT"
      - step: *semver_step
      - step: *build_and_publish_step
      - step: *deploy_step
      - step: *postman_step
  pull-requests:
    "**":
      - step: *build_only_step